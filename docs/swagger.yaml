basePath: /
definitions:
  models.V0Storage:
    properties:
      articleID:
        type: integer
      bestand:
        type: integer
      name:
        type: string
    type: object
  models.V1Storage:
    properties:
      articleID:
        type: integer
      bestand:
        type: integer
      hoehe:
        type: integer
      lagerabschnitt:
        type: integer
      platz:
        type: integer
      reihe:
        type: integer
      standort:
        type: string
    type: object
  models.V2Storage:
    properties:
      articleID:
        type: integer
      bestand:
        type: integer
      hoehe:
        type: integer
      kapazitaet:
        type: integer
      lagerabschnitt:
        type: integer
      platz:
        type: integer
      reihe:
        type: integer
      standort:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: justin.kromlinger@stud.htwk-leipzig.de
    name: Justin Kromlinger
    url: https://hashworks.net
  description: Solution for 'Lager' backend task of https://sites.google.com/relaxdays.de/hackathon-relaxdays/startseite#h.n7504a3wvsj5
  license:
    name: GNU Affero General Public License v3
    url: https://gnu.org/licenses/agpl.html
  title: Storage Backend Task
  version: "1.0"
paths:
  /storagePlace:
    delete:
      parameters:
      - description: Name of storage to delete
        in: query
        name: x
        required: true
        type: string
      responses:
        "204":
          description: ""
      summary: Delete a storage by name
      tags:
      - V0Storage
    get:
      parameters:
      - description: Name of storage to retrieve
        in: query
        name: x
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.V0Storage'
        "404":
          description: Storage not found
          schema:
            type: ""
      summary: Returns a specifc storage by name
      tags:
      - V0Storage
  /storagePlace/:
    post:
      parameters:
      - description: Storage to Update
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V0Storage'
      responses:
        "204":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      summary: Update a storage
      tags:
      - V0Storage
    put:
      parameters:
      - description: Storage to save
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V0Storage'
      responses:
        "204":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      summary: Save a storage
      tags:
      - V0Storage
  /storagesPlaces:
    get:
      parameters:
      - description: Number of storages after the named one
        in: query
        name: "n"
        required: true
        type: integer
      - description: Storage name where we should start the cursor
        in: query
        name: x
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.V0Storage'
            type: array
      summary: Returns "n" storages lexicographically after storage "name"
      tags:
      - V0Storage
  /v1/storagePlace:
    delete:
      parameters:
      - description: Name of storage to delete
        in: query
        name: x
        required: true
        type: string
      responses:
        "204":
          description: ""
      summary: Delete a storage by name
      tags:
      - V1Storage
    get:
      parameters:
      - description: Name of storage to retrieve
        in: query
        name: x
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.V1Storage'
        "404":
          description: Storage not found
          schema:
            type: ""
      summary: Returns a specifc storage by name
      tags:
      - V1Storage
  /v1/storagePlace/:
    post:
      parameters:
      - description: Storage to Update
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V1Storage'
      responses:
        "200":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      summary: Update a storage
      tags:
      - V1Storage
    put:
      parameters:
      - description: Storage to save
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V1Storage'
      responses:
        "200":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      summary: Save a storage
      tags:
      - V1Storage
  /v1/storagesPlaces:
    get:
      parameters:
      - description: Number of storages after the named one
        in: query
        name: "n"
        required: true
        type: integer
      - description: Storage name where we should start the cursor
        in: query
        name: x
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.V1Storage'
            type: array
      summary: Returns "n" storages lexicographically after storage "name"
      tags:
      - V1Storage
  /v2/storagePlace:
    delete:
      parameters:
      - description: Name of storage to delete
        in: query
        name: x
        required: true
        type: string
      responses:
        "204":
          description: ""
      summary: Delete a storage by name
      tags:
      - V2Storage
    get:
      parameters:
      - description: Name of storage to retrieve
        in: query
        name: x
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.V2Storage'
        "404":
          description: Storage not found
          schema:
            type: ""
      summary: Returns a specifc storage by name
      tags:
      - V2Storage
  /v2/storagePlace/:
    post:
      parameters:
      - description: Storage to Update
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V2Storage'
      responses:
        "200":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      summary: Update a storage
      tags:
      - V2Storage
    put:
      parameters:
      - description: Storage to save
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V2Storage'
      responses:
        "200":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      summary: Save a storage
      tags:
      - V2Storage
  /v2/storagePlacesForArticleID:
    get:
      parameters:
      - description: Article ID
        in: query
        name: x
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.V2Storage'
            type: array
      summary: Returns all storages that contain an article
      tags:
      - V2Storage
  /v2/storagesPlaces:
    get:
      parameters:
      - description: Number of storages after the named one
        in: query
        name: "n"
        required: true
        type: integer
      - description: Storage name where we should start the cursor
        in: query
        name: x
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.V2Storage'
            type: array
      summary: Returns "n" storages lexicographically after storage "name"
      tags:
      - V2Storage
  /v3/storagePlace:
    delete:
      parameters:
      - description: Name of storage to delete
        in: query
        name: x
        required: true
        type: string
      responses:
        "204":
          description: ""
      security:
      - BasicAuth: []
      summary: Delete a storage by name
      tags:
      - V3Storage
    get:
      parameters:
      - description: Name of storage to retrieve
        in: query
        name: x
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.V2Storage'
        "404":
          description: Storage not found
          schema:
            type: ""
      security:
      - BasicAuth: []
      summary: Returns a specifc storage by name
      tags:
      - V3Storage
  /v3/storagePlace/:
    post:
      parameters:
      - description: Storage to Update
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V2Storage'
      responses:
        "200":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      security:
      - BasicAuth: []
      summary: Update a storage
      tags:
      - V3Storage
    put:
      parameters:
      - description: Storage to save
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/models.V2Storage'
      responses:
        "200":
          description: ""
        "400":
          description: Invalid storage
          schema:
            type: ""
      security:
      - BasicAuth: []
      summary: Save a storage
      tags:
      - V3Storage
  /v3/storagePlacesForArticleID:
    get:
      parameters:
      - description: Article ID
        in: query
        name: x
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.V2Storage'
            type: array
      security:
      - BasicAuth: []
      summary: Returns all storages that contain an article
      tags:
      - V3Storage
  /v3/storagesPlaces:
    get:
      parameters:
      - description: Number of storages after the named one
        in: query
        name: "n"
        required: true
        type: integer
      - description: Storage name where we should start the cursor
        in: query
        name: x
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.V2Storage'
            type: array
      security:
      - BasicAuth: []
      summary: Returns "n" storages lexicographically after storage "name"
      tags:
      - V3Storage
securityDefinitions:
  "":
    type: basic
swagger: "2.0"
